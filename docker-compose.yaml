services:
  db:
    container_name: 'trainings_db'
    image: postgres:16.4
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5438:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  db_redis:
    image: "redis:7.4"
    container_name: db_redis
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    restart: always
    volumes:
      - redis_data:/data

  migrations:
    build:
      dockerfile: docker/migrations/Dockerfile
      context: .
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    command: [ "sh", "/trainings_app/scripts/docker/migrate.sh" ]
    volumes:
      - .:/trainings_app
    networks:
      - app_network
    restart: "no"

  app:
    container_name: 'trainings_app'
    build:
      dockerfile: docker/app/Dockerfile
      context: .
    depends_on:
      - migrations
    image: trainings-base
    env_file:
      - .env
    ports:
      - "8080:8000"
    command: >
      bash -c "
      poetry install &&
      uvicorn trainings_app.main:app --host 0.0.0.0 --port 8000 --reload"
    volumes:
      - .:/trainings_app
    networks:
      - app_network
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
    networks:
      - app_network

  worker_report:
    image: trainings-base
    volumes:
      - .:/trainings_app
    env_file:
      - .env
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    command: >
      /trainings_app/scripts/celery/wait_for_rabbitmq.sh &&
      python /trainings_app/trainings_app/reports/run_worker.py
    depends_on:
      - rabbitmq
      - app
    networks:
      - app_network

  beat_report:
    image: trainings-base
    volumes:
      - .:/trainings_app
    env_file:
      - .env
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    command: >
      /trainings_app/scripts/celery/wait_for_rabbitmq.sh &&
      python /trainings_app/trainings_app/reports/run_beat.py
    depends_on:
      - rabbitmq
      - app
    networks:
      - app_network

  worker_check_membership:
    image: trainings-base
    volumes:
      - .:/trainings_app
    env_file:
      - .env
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    command: >
      /trainings_app/scripts/celery/wait_for_rabbitmq.sh &&
      python /trainings_app/trainings_app/check_membership/run_worker.py
    depends_on:
      - rabbitmq
      - app
    networks:
      - app_network

  beat_check_membership:
    image: trainings-base
    volumes:
      - .:/trainings_app
    env_file:
      - .env
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    command: >
      /trainings_app/scripts/celery/wait_for_rabbitmq.sh &&
      python /trainings_app/trainings_app/check_membership/run_beat.py
    depends_on:
      - rabbitmq
      - app
    networks:
      - app_network

volumes:
  postgres_data:
  redis_data:

networks:
  app_network:
    driver: bridge